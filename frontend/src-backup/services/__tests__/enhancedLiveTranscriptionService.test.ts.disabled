// Enhanced Live Transcription Service Test Complete File
import EnhancedLiveTranscriptionService from '../enhancedLiveTranscriptionService';

// ===== MOCK SETUP =====

// Mock MediaRecorder
const mockMediaRecorder = {
  state: 'inactive',
  start: jest.fn(),
  stop: jest.fn(),
  pause: jest.fn(),
  resume: jest.fn(),
  ondataavailable: null as ((event: any) => void) | null,
  onerror: null as ((event: any) => void) | null,
  onstart: null as ((event: any) => void) | null,
  onstop: null as ((event: any) => void) | null
};

// Mock SpeechRecognition
const mockSpeechRecognition = {
  continuous: false,
  interimResults: false,
  lang: 'en-US',
  start: jest.fn(),
  stop: jest.fn(),
  abort: jest.fn(),
  onresult: null as ((event: any) => void) | null,
  onerror: null as ((event: any) => void) | null,
  onend: null as ((event: any) => void) | null,
  onstart: null as ((event: any) => void) | null
};

// Mock MediaStream
const mockMediaStream = {
  getTracks: () => [{ stop: jest.fn() }],
  getAudioTracks: () => [{ stop: jest.fn() }]
};

// Mock getUserMedia
const mockGetUserMedia = jest.fn();

// Mock fetch for API calls
const mockFetch = jest.fn();

beforeEach(() => {
  jest.clearAllMocks();

  // Setup global mocks
  global.MediaRecorder = jest.fn().mockImplementation(() => mockMediaRecorder);
  (global.MediaRecorder as any).isTypeSupported = jest.fn().mockReturnValue(true);

  global.navigator.mediaDevices = {
    getUserMedia: mockGetUserMedia
  } as any;

  (global as any).SpeechRecognition = jest.fn().mockImplementation(() => mockSpeechRecognition);
  (global as any).webkitSpeechRecognition = jest.fn().mockImplementation(() => mockSpeechRecognition);

  global.fetch = mockFetch;

  // Setup default successful responses
  mockGetUserMedia.mockResolvedValue(mockMediaStream);
  
  mockFetch.mockResolvedValue({
    ok: true,
    json: () => Promise.resolve({
      success: true,
      sessionId: 'test-session-123',
      useN8N: false,
      preferredService: 'whisper'
    })
  });
});

// ===== TESTS =====
describe('EnhancedLiveTranscriptionService', () => {
  let service: EnhancedLiveTranscriptionService;

  beforeEach(() => {
    service = new EnhancedLiveTranscriptionService();
  });

  describe('Configuration', () => {
    test('getConfig returns service configuration', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({
          success: true,
          sessionId: 'test-session-123',
          useN8N: false,
          preferredService: 'whisper'
        })
      });

      const result = await service.getConfig();

      expect(result.success).toBe(true);
      expect(result.sessionId).toBe('test-session-123');
      expect(result.useN8N).toBe(false);
      expect(result.preferredService).toBe('whisper');
    });

    test('getConfig handles API errors', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({
          success: false,
          error: 'Configuration error'
        })
      });

      await expect(service.getConfig())
        .rejects.toThrow('Configuration error');
    });
  });

  describe('Recording Management', () => {
    test('starts recording successfully with all features', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({
          success: true,
          sessionId: 'test-session-123',
          useN8N: false,
          preferredService: 'whisper',
          features: {
            mediaRecorder: true,
            speechRecognition: true,
            audioStream: true
          }
        })
      });

      const result = await service.startRecording({
        sessionId: 'test-session-123',
        onTranscription: jest.fn(),
        onError: jest.fn()
      });

      expect(result.success).toBe(true);
      expect(result.features?.mediaRecorder).toBe(true);
      expect(result.features?.speechRecognition).toBe(true);
      expect(result.features?.audioStream).toBe(true);
      expect(mockGetUserMedia).toHaveBeenCalled();
      expect(global.MediaRecorder).toHaveBeenCalled();
    });

    test('handles microphone permission denied', async () => {
      mockGetUserMedia.mockRejectedValue(new Error('Permission denied'));

      const result = await service.startRecording({
        sessionId: 'test-session-123'
      });

      expect(result.success).toBe(false);
      expect(result.error).toBe('Permission denied');
    });

    test('handles speech recognition unavailable', async () => {
      // Remove speech recognition support
      (global as any).SpeechRecognition = undefined;
      (global as any).webkitSpeechRecognition = undefined;

      const result = await service.startRecording({
        sessionId: 'test-session-123'
      });

      expect(result.features?.speechRecognition).toBe(false);
      expect(result.features?.mediaRecorder).toBe(true);
      expect(result.features?.audioStream).toBe(true);
    });

    test('stops recording successfully', async () => {
      // Start recording first
      await service.startRecording({
        sessionId: 'test-session-123'
      });

      const result = await service.stopRecording();

      expect(result.success).toBe(true);
      expect(service.isRecording).toBe(false);
    });

    test('pauses and resumes recording', async () => {
      // Start recording first
      await service.startRecording({
        sessionId: 'test-session-123'
      });

      const pauseResult = await service.pauseRecording();
      expect(pauseResult.success).toBe(true);
      expect(service.isPaused).toBe(true);

      const resumeResult = await service.resumeRecording();
      expect(resumeResult.success).toBe(true);
      expect(service.isPaused).toBe(false);
    });
  });

  describe('Audio Processing', () => {
    test('processes audio chunks successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({
          success: true,
          transcription: {
            id: '1',
            text: 'Test transcription',
            speaker_name: 'Speaker 1',
            confidence: 0.95
          }
        })
      });

      const mockOptions = {
        audioData: 'base64audiodata',
        sessionId: 'test-session-123',
        preferredService: 'whisper',
        useN8N: false
      };

      const result = await service.processChunk(mockOptions);

      expect(result.success).toBe(true);
      expect(result.transcription).toBeDefined();
      expect(result.transcription.text).toBe('Test transcription');
      expect(mockFetch).toHaveBeenCalledWith(
        expect.stringContaining('/api/transcription/process-chunk'),
        expect.objectContaining({
          method: 'POST',
          headers: expect.objectContaining({
            'Content-Type': 'application/json'
          }),
          body: expect.stringContaining('base64audiodata')
        })
      );
    });

    test('handles processing errors', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({
          success: false,
          error: 'Processing failed'
        })
      });

      const mockOptions = {
        audioData: 'base64audiodata',
        sessionId: 'test-session-123'
      };

      const result = await service.processChunk(mockOptions);

      expect(result.success).toBe(false);
      expect(result.error).toBe('Processing failed');
    });

    test('handles network errors during processing', async () => {
      mockFetch.mockRejectedValue(new Error('Network error'));

      const mockOptions = {
        audioData: 'base64audiodata',
        sessionId: 'test-session-123'
      };

      const result = await service.processChunk(mockOptions);

      expect(result.success).toBe(false);
      expect(result.error).toBe('Network error');
    });
  });

  describe('Audio Chunk Management', () => {
    test('getCurrentAudioChunk returns latest chunk', async () => {
      // Add some audio chunks
      service.audioChunks = [
        new Blob(['chunk1'], { type: 'audio/webm' }),
        new Blob(['chunk2'], { type: 'audio/webm' })
      ];

      const result = await service.getCurrentAudioChunk();

      expect(result).toBeInstanceOf(Blob);
      expect(result?.size).toBeGreaterThan(0);
    });

    test('getCurrentAudioChunk returns null when no chunks', async () => {
      service.audioChunks = [];

      const result = await service.getCurrentAudioChunk();

      expect(result).toBe(null);
    });

    test('getAudioChunk converts to base64', async () => {
      // Mock FileReader
      const mockFileReader = {
        readAsDataURL: jest.fn(),
        result: 'data:audio/webm;base64,dGVzdA==',
        onload: null as (() => void) | null,
        onerror: null as (() => void) | null
      };

      global.FileReader = jest.fn().mockImplementation(() => mockFileReader);

      service.audioChunks = [new Blob(['test'], { type: 'audio/webm' })];

      const promise = service.getAudioChunk();

      // Trigger the onload callback
      if (mockFileReader.onload) {
        mockFileReader.onload();
      }

      const result = await promise;

      expect(result).toBe('data:audio/webm;base64,dGVzdA==');
    });
  });

  describe('Utility Methods', () => {
    test('blobToBase64 converts blob correctly', async () => {
      const mockFileReader = {
        readAsDataURL: jest.fn(),
        result: 'data:audio/webm;base64,dGVzdA==',
        onload: null as (() => void) | null,
        onerror: null as (() => void) | null
      };

      global.FileReader = jest.fn().mockImplementation(() => mockFileReader);

      const testBlob = new Blob(['test'], { type: 'audio/webm' });
      const promise = service.blobToBase64(testBlob);

      // Trigger the onload callback
      if (mockFileReader.onload) {
        mockFileReader.onload();
      }

      const result = await promise;

      expect(result).toBe('data:audio/webm;base64,dGVzdA==');
      expect(mockFileReader.readAsDataURL).toHaveBeenCalledWith(testBlob);
    });

    test('isActivelyRecording returns correct status', () => {
      expect(service.isActivelyRecording()).toBe(false);

      service.isRecording = true;
      expect(service.isActivelyRecording()).toBe(true);

      service.isPaused = true;
      expect(service.isActivelyRecording()).toBe(false);
    });

    test('getStatus returns complete status', () => {
      service.isRecording = true;
      service.isPaused = false;
      service.audioStream = mockMediaStream as any;

      const status = service.getStatus();

      expect(status.isRecording).toBe(true);
      expect(status.isPaused).toBe(false);
      expect(status.hasAudioStream).toBe(true);
    });
  });

  describe('Error Handling', () => {
    test('handles speech recognition errors', async () => {
      const onError = jest.fn();
      
      await service.startRecording({
        sessionId: 'test-session-123',
        onError
      });

      // Simulate speech recognition error
      const errorEvent = { error: 'network' };
      if (mockSpeechRecognition.onerror) {
        mockSpeechRecognition.onerror(errorEvent);
      }

      expect(onError).toHaveBeenCalledWith(expect.any(Error));
    });

    test('handles media recorder errors', async () => {
      const onError = jest.fn();
      
      await service.startRecording({
        sessionId: 'test-session-123',
        onError
      });

      // Simulate media recorder error
      const errorEvent = { error: new Error('Recording failed') };
      if (mockMediaRecorder.onerror) {
        mockMediaRecorder.onerror(errorEvent);
      }

      expect(onError).toHaveBeenCalledWith(expect.any(Error));
    });

    test('handles speech recognition end event', async () => {
      await service.startRecording({
        sessionId: 'test-session-123'
      });

      // Should not throw when onend is called
      expect(() => {
        if (mockSpeechRecognition.onend) {
          mockSpeechRecognition.onend({});
        }
      }).not.toThrow();
    });
  });

  describe('Cleanup', () => {
    test('properly cleans up resources on stop', async () => {
      await service.startRecording({
        sessionId: 'test-session-123'
      });

      await service.stopRecording();

      expect(mockMediaRecorder.stop).toHaveBeenCalled();
      expect(mockSpeechRecognition.stop).toHaveBeenCalled();
      expect(service.audioStream).toBe(null);
      expect(service.isRecording).toBe(false);
      expect(service.isPaused).toBe(false);
    });
  });
});